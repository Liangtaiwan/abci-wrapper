#!/usr/bin/python3
import argparse
import sys
import os
import re
import subprocess
import getpass
from pathlib import Path
import random
from datetime import datetime

import config
from utils import *

def run_job(args):
    group = os.getenv("ABCI_GROUP")
    qsub_params = []
    # qsub_params.extend(['-c', str(args.cpu)])
    # qsub_params.extend(['-g', group])
    if args.time is not None:
        qsub_params.extend(['-l', f"h_rt={args.time}"])
    # if args.gpu > 0:
    #     qsub_params.extend([f'--gres=gpu:{args.gpu}'])

    # TODO: partitions, change according to time
    qsub_params.extend(['-l', f"{args.resource}={args.num_nodes}"])

    #TODO: add --signal

    if args.job_name:
        qsub_params.extend(['-N', args.job_name])

    # CMD
    real_cmd = args.cmd
    username = getpass.getuser()
    real_cmd_without_singularity = None
    if args.singularity is not None:
        current_path = os.path.abspath(os.getcwd())
        singularity = ["singularity", "run" ,"--nv" ,"--bind",
                       f"/scratch/{username}:/scratch/{username},/groups/{group}:/groups/{group}", os.path.join(current_path, args.singularity)]
        real_cmd_without_singularity = real_cmd
        real_cmd = singularity + real_cmd

    if args.detach:
        # shellscript = '#!/bin/sh\n' + ' '.join(['/usr/bin/srun', '-u', '--mpi=pmix', *real_cmd])
        # shellscript = '#!/bin/sh\n' + ' '.join(['/usr/bin/srun', '-u', *real_cmd])
        time = datetime.now().strftime("%Y%m%d")
        file_name = "tmp_" + time + "_" + "{:010d}".format(random.randint(0, 10**10)) + ".sh"
        if args.job_name:
            file_name = f"{args.job_name}_{random.randint(0, 10**10)}.sh"
        elif real_cmd_without_singularity is None:
            file_name = f"{'_'.join(real_cmd)}_{random.randint(0, 10**10)}.sh"
        else:
            file_name = f"{'_'.join(real_cmd_without_singularity)}_{random.randint(0, 10**10)}.sh"
        output_path = f'/scratch/{username}/logs/'
        os.makedirs(output_path, exist_ok=True)
        with open(file_name, "w") as f:
            f.write("#!/bin/bash\n")
            for s in qsub_params:
                if s[0] ==  "-":
                    f.write(f"#$ {s} ")
                else:
                    f.write(f"{s}\n")
            f.write(f"#$ -o {output_path}\n")
            f.write(f"#$ -e {output_path}\n")
            f.write("#$ -cwd\n\n")
            f.write(" ".join(real_cmd))
        if args.ar_id is not None:
            proc = subprocess.run(['/usr/local/bin/qsub', '-g', group, '-ar', args.ar_id, file_name])
        else:
            proc = subprocess.run(['/usr/local/bin/qsub', '-g', group, file_name])
        if not args.keep_file:
            os.remove(file_name)
    else:
        qsub_params.extend(['-g', group])
        if args.ar_id is not None:
            qsub_params.extend(['-ar', args.ar_id])
        # qsub_params.extend(['--mpi=pmix'])
        if sys.stdout.isatty():
            qsub_params.extend(['-pty', 'y'])
        # qsub_params.extend(['-u', '--quit-on-interrupt'])
        if real_cmd[0] == '':
            os.execl('/usr/local/bin/qrsh', '/usr/local/bin/qrsh', *qsub_params)
        else:
            os.execl('/usr/local/bin/qrsh', '/usr/local/bin/qrsh', *qsub_params, *real_cmd)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='qrun',
        description='Run computing jobs.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        '-t', dest='time', type=str, default=None,
        help='Time limit for the job (days-hours).'
    )
    parser.add_argument(
        '-r', dest='resource', type=str, choices=config.resources,
        help='Resources specified for the job. '
              f'Valid partitions: {",".join(config.resources)}.'
    )
    parser.add_argument(
        '-c', dest='cpu', type=int, default=0,
        help='Number of CPU cores to request.'
    )
    parser.add_argument(
        '-m', dest='mem', type=float, default=0,
        help='Size of RAM (in GB) to request. If not specified, the memory size will be '
              'automatically decided according to free memory size of available nodes.'
    )
    parser.add_argument(
        '-G', dest='gpu_type', default=None, choices=["V100", "A100", None],
        help='Request a GPU type. Valid types: V100, A100, None'
    )
    parser.add_argument(
        '-g', dest='gpu', type=int, default=0,
        help='Number of CPU cores to request.',
    )
    parser.add_argument(
        '-n', dest='num_nodes', type=int, default=1,
        help='Number of nodes to request.',
    )
    parser.add_argument(
        '-d', dest='detach', default=False, action='store_true',
        help='Run job in detached (background) mode. Pseudo-tty is not supported in this mode.'
    )
    parser.add_argument(
        '-N', dest='job_name', default=None,
        help=('The job name which will be shown in the job list (hjob). '
              'Will be set to the full command (ex: python train.py -lr 0.01) if not specified.')
    )
    parser.add_argument(
        '-ar', dest='ar_id', default=None,
        help=('Specify reserved ID (AR-ID), when using reserved compute nodes')
    )
    parser.add_argument(
        '-k', dest='keep_file', default=False, action='store_true',
        help='Keep the shell script file after submitting the job.'
    )
    parser.add_argument(
        '-s', dest='singularity', default=None,
        help='Run the command with given container.'
    )
    parser.add_argument(
        'cmd', nargs='?', default='',
        help='The command to run.'
    )
    parser.add_argument(
        'args', nargs=argparse.REMAINDER, metavar=''
    )

    args = parser.parse_args()

    # Merge cmd and args
    args.cmd = [args.cmd] + args.args
    del args.args

    # Check CPU and GPU values
    # if not config.cpu_min <= args.cpu <= config.cpu_max:
    #     sys.exit(f'Error: Requested number of CPU ({args.cpu}) is out of range '
    #              f'({config.cpu_min}-{config.cpu_max}).')
    # if args.mem is not None and not config.mem_min <= args.mem <= config.mem_max:
    #     sys.exit(f'Error: Requested memory size ({args.mem:.2f} GB) is out of range '
    #              f'({config.mem_min}-{config.mem_max}).')

    # # Check GPU number and types
    # if args.gpu is None:
    #     args.gpu =  0
    # if args.gpu > 0:
    #     if args.gpu > config.gpu_max:
    #         sys.exit(f'Error: Requested number of GPU ({args.gpu}) is out of range '
    #                  f'({0}-{config.gpu_max}).')

    if args.resource is None:
        args.resource = find_minimal_match_resource_type(
            args.gpu_type,
            args.gpu,
            args.cpu,
            args.mem
        )
        if args.resource is None:
            print("Error: Cannot find a valid resource type for the job. Please make sure the resource you request is available on ABCI.")
            sys.exit(1)
    run_job(args)
